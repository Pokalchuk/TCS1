C:\NUWEE\SECOND TERM MAGIST\TCS\Lab2>docker run -d -p 80:80 docker/getting-started
84447765077ee12d7cb7c8e849cf4bb87137e2a71e169b71e09aab1f1ce786e9


STEP 4
C:\NUWEE\SECOND TERM MAGIST\TCS\Lab2>docker build . -f Dockerfile.base -t myapp
[+] Building 2.4s (8/8) FINISHED
 => [internal] load build definition from Dockerfile.base                                                                                                                       0.0s
 => => transferring dockerfile: 36B                                                                                                                                             0.0s
 => [internal] load .dockerignore                                                                                                                                               0.0s
 => => transferring context: 2B                                                                                                                                                 0.0s
 => [internal] load metadata for docker.io/library/python:3.8-slim-buster                                                                                                       2.2s
 => [internal] load build context                                                                                                                                               0.0s
 => => transferring context: 27B                                                                                                                                                0.0s
 => [1/3] FROM docker.io/library/python:3.8-slim-buster@sha256:3fe962ec7350d8af5345913206e30731d96198945147c57c20b4965285b94882                                                 0.0s
 => CACHED [2/3] COPY app.py /                                                                                                                                                  0.0s
 => CACHED [3/3] RUN pip install flask                                                                                                                                          0.0s
 => exporting to image                                                                                                                                                          0.0s
 => => exporting layers                                                                                                                                                         0.0s
[+] Building 13.9s (4/7)
 => [internal] load build definition from Dockerfile.base                                                                                                                       0.0s
 => => transferring dockerfile: 132B                                                                                                                                            0.0s
[+] Building 20.5s (8/8) FINISHED
 => [internal] load build definition from Dockerfile.base                                                                                                                       0.0s
 => => transferring dockerfile: 132B                                                                                                                                            0.0s
 => [internal] load .dockerignore                                                                                                                                               0.0s
 => => transferring context: 2B                                                                                                                                                 0.0s
 => [internal] load metadata for docker.io/library/python:3.10                                                                                                                  2.4s
 => [internal] load build context                                                                                                                                               0.0si
 => => transferring context: 27B                                                                                                                                                0.0s
 => [1/3] FROM docker.io/library/python:3.10@sha256:14b683d63e171ad811b5ff3d55d3a1138f34bb324e2e222fe37b6eab121a8517                                                           13.3s
 => => resolve docker.io/library/python:3.10@sha256:14b683d63e171ad811b5ff3d55d3a1138f34bb324e2e222fe37b6eab121a8517                                                            0.0s
 => => sha256:2b8b079d754854514f53f2a5dcc1eee4f87feb00221c2cca1320c71e7064f365 7.90kB / 7.90kB                                                                                  0.0s
 => => sha256:3e440a7045683e27f8e2fa04000e0e078d8dfac0c971358ae0f8c65c13321c8e 55.05MB / 55.05MB                                                                                2.4s
 => => sha256:670730c27c2eacf07897a6e94fe55423ea50b884d9c28161a283bbbf064d1124 10.88MB / 10.88MB                                                                                1.5s
 => => sha256:14b683d63e171ad811b5ff3d55d3a1138f34bb324e2e222fe37b6eab121a8517 2.14kB / 2.14kB                                                                                  0.0s
 => => sha256:84a161676fcf8e1ea4f706075e54bb7a9cf0e1136cdbc9d07bf2867e3e924770 2.22kB / 2.22kB                                                                                  0.0s
 => => sha256:68a71c865a2c34678c6dea55e4b0928f751ee3c0ca91cace6e4e0578c534d6cf 5.17MB / 5.17MB                                                                                  2.4s
 => => sha256:5a7a2c95f0f8b221d776ccf35911b68eec2cf9414a44d216205a6f03e381d3d7 54.58MB / 54.58MB                                                                                4.0s
 => => extracting sha256:3e440a7045683e27f8e2fa04000e0e078d8dfac0c971358ae0f8c65c13321c8e                                                                                       1.3s
 => => sha256:6d627e120214bb28a729d4b54a0ecba4c4aeaf0295ca2d1f129480145fad2af6 196.81MB / 196.81MB                                                                              8.5s
 => => sha256:f8c6dc6780819f5eb5a6ee84ce72dd613d5e6c406585211a064b6ef641c8a09a 6.29MB / 6.29MB                                                                                  4.1s
 => => extracting sha256:68a71c865a2c34678c6dea55e4b0928f751ee3c0ca91cace6e4e0578c534d6cf                                                                                       0.1s
 => => extracting sha256:670730c27c2eacf07897a6e94fe55423ea50b884d9c28161a283bbbf064d1124                                                                                       0.2s
 => => sha256:a6daac42f0daee2fe11dd237f570a94067fd69ec126838af3bc82a4d57f11f8c 17.39MB / 17.39MB                                                                                5.5s
 => => sha256:6aee427ebf20be7b852728cc0cab3bafd4ba8710792d5239cf62316fc4665e16 243B / 243B                                                                                      4.3s
 => => extracting sha256:5a7a2c95f0f8b221d776ccf35911b68eec2cf9414a44d216205a6f03e381d3d7                                                                                       1.3s
 => => sha256:f3a8bc02d1593e5bf4b6dcf93773a6a4787cb1889270c22c050ba265dd582d0c 3.08MB / 3.08MB                                                                                  4.6s
 => => extracting sha256:6d627e120214bb28a729d4b54a0ecba4c4aeaf0295ca2d1f129480145fad2af6                                                                                       3.7s
 => => extracting sha256:f8c6dc6780819f5eb5a6ee84ce72dd613d5e6c406585211a064b6ef641c8a09a                                                                                       0.2s
 => => extracting sha256:a6daac42f0daee2fe11dd237f570a94067fd69ec126838af3bc82a4d57f11f8c                                                                                       0.4s
 => => extracting sha256:6aee427ebf20be7b852728cc0cab3bafd4ba8710792d5239cf62316fc4665e16                                                                                       0.0s
 => => extracting sha256:f3a8bc02d1593e5bf4b6dcf93773a6a4787cb1889270c22c050ba265dd582d0c                                                                                       0.1s
 => [2/3] COPY app.py /                                                                                                                                                         0.8s
 => [3/3] RUN pip install flask                                                                                                                                                 3.8s
 => exporting to image                                                                                                                                                          0.1s
 => => exporting layers                                                                                                                                                         0.1s
 => => writing image sha256:550e0a7f9ee96c47146ed5bd688a147975a13b8ecb9a0ddba37f693803a1236b                                                                                    0.0s
 => => naming to docker.io/library/myapp                                                                                                                                        0.0s

C:\NUWEE\SECOND_TERM\TCS\Lab2>docker run myapp
Hello, World!

STEP 6
C:\NUWEE\SECOND TERM MAGIST\TCS\Lab2>docker container ls -a
CONTAINER ID   IMAGE                        COMMAND                  CREATED          STATUS                      PORTS                NAMES
efa8ca894b0c   myapp                        "python ./app.py"        19 seconds ago   Exited (0) 18 seconds ago                        interesting_saha             eloquent_rhodes


STEP 7
C:\NUWEE\SECOND_TERM\TCS\Lab2>python part2.py
Лабораторна робота №2. Створення Docker контейнера для запуску додатку.

Мета: ознайомитися з Docker та створенням власних Docker контейнерів, написати Dockerfile для збирання контейнера з додатком, запустити додаток у Docker контейнері.

Завдання

⦁       Створіть у робочому репозиторії каталог Lab_02. Усі наступні завдання необхідно виконувати у цьому каталозі.
⦁       Напишіть додаток, який буде запускатися з терміналу та виводити "Hello, World!" у консоль. Збережіть код у файлі з назвою "app.py".
⦁       Створіть файл з назвою "Dockerfile". Додайте у файл наступний вміст:

Цей Dockerfile означає, що ми будемо використовувати базовий образ Python версії 3, копіювати файл "app.py" в кореневу директорію контейнера, встановлювати бібліотеку Flask та запускати додаток командою "python ./app.py".
⦁       Відкрийте термінал та перейдіть до кореневої директорії проекту. Введіть наступну команду для збірки контейнера:

$> docker build -t myapp .

⦁       Запустіть Docker контейнер, використовуючи наступну команду:

$> docker run myapp

⦁       Зупиніть та видаліть створений контейнер.
⦁       На вибраній мові програмування напишіть програму, яка зчитує текст цієї лабораторної роботи із файлу і виводить його у термінал.
⦁       Створіть Dockerfile для запуску цієї програми у контейнері.
⦁       Зберіть та запустіть створений контейнер.
⦁        Закомітьте усі створені файли та відправте зміни на GitHub.


STEP 8
docker build . -f Dockerfile2.txt -t myapp2
[+] Building 6.2s (9/9) FINISHED
 => [internal] load build definition from Dockerfile2.txt                                                                                                                       0.0s
 => => transferring dockerfile: 157B                                                                                                                                            0.0s
 => [internal] load .dockerignore                                                                                                                                               0.0s
 => => transferring context: 2B                                                                                                                                                 0.0s
 => [internal] load metadata for docker.io/library/python:3.10                                                                                                                  1.6s
 => [internal] load build context                                                                                                                                               0.0s
 => => transferring context: 177B                                                                                                                                               0.0s
 => CACHED [1/4] FROM docker.io/library/python:3.10@sha256:14b683d63e171ad811b5ff3d55d3a1138f34bb324e2e222fe37b6eab121a8517                                                     0.0s
 => [2/4] COPY part2.py /                                                                                                                                                       0.1s
 => [3/4] COPY lab2Full.txt /                                                                                                                                                   0.1s
 => [4/4] RUN pip install flask                                                                                                                                                 4.0s
 => exporting to image                                                                                                                                                          0.2s
 => => exporting layers                                                                                                                                                         0.2s
 => => writing image sha256:a59399374a41424c6118b7ea4a09e258efd7d5196f15d99f096eca54feed4bf0                                                                                    0.0s
 => => naming to docker.io/library/myapp2                                                                                                                                       0.0s

C:\NUWEE\SECOND_TERM\TCS\Lab2>docker run myapp2
Лабораторна робота №2. Створення Docker контейнера для запуску додатку.

Мета: ознайомитися з Docker та створенням власних Docker контейнерів, написати Dockerfile для збирання контейнера з додатком, запустити додаток у Docker контейнері.

Завдання

⦁       Створіть у робочому репозиторії каталог Lab_02. Усі наступні завдання необхідно виконувати у цьому каталозі.
⦁       Напишіть додаток, який буде запускатися з терміналу та виводити "Hello, World!" у консоль. Збережіть код у файлі з назвою "app.py".
⦁       Створіть файл з назвою "Dockerfile". Додайте у файл наступний вміст:

Цей Dockerfile означає, що ми будемо використовувати базовий образ Python версії 3, копіювати файл "app.py" в кореневу директорію контейнера, встановлювати бібліотеку Flask та запускати додаток командою "python ./app.py".
⦁       Відкрийте термінал та перейдіть до кореневої директорії проекту. Введіть наступну команду для збірки контейнера:

$> docker build -t myapp .

⦁       Запустіть Docker контейнер, використовуючи наступну команду:

$> docker run myapp

⦁       Зупиніть та видаліть створений контейнер.
⦁       На вибраній мові програмування напишіть програму, яка зчитує текст цієї лабораторної роботи із файлу і виводить його у термінал.
⦁       Створіть Dockerfile для запуску цієї програми у контейнері.
⦁       Зберіть та запустіть створений контейнер.
⦁        Закомітьте усі створені файли та відправте зміни на GitHub.


STEP 9
C:\NUWEE\SECOND_TERM\TCS\Lab2>docker container ls -a
CONTAINER ID   IMAGE                        COMMAND                  CREATED          STATUS                      PORTS                NAMES
064182f104b8   myapp2                       "python ./part2.py"      57 seconds ago   Exited (0) 53 seconds ago                        awesome_banzai